// pattern: 04
// pattern type: порождающий паттерн
// pattern name: Прототип (Prototype)
// pattern shortcat: PT

public class Prototype {
    public static void main (String [] args) {

    }
}


// Прототип - позволяет копировать объекты, не вдаваясь в подробности их реализации

// Интерфейс прототипов описывает операции копирования. В большинстве случаев - это
// единственный метод clone.
// Конкретный прототип реализует операцию копирования самого себя.
// Клиент создает копию объекта, обращаясь у нему через общий интерфейс прототипов.

// Хранилище прототипов облегчают доступ к часто используемым прототипам, храня
// предсозданный набор эталонных, готовых к копированию объектов. Простейшее хранилище
// может быть постоено с помощью хеш-таблицы вида "имя прототипа - прототип".


abstract class APrototype {
    abstract public APrototype clone ();

}


class S1 extends APrototype {
    String dataField1="S1 dataField";
    int numberOfS1 = 0;

    S1 (S1 source) {
	if source != null then
	this.dataField1 = source.dataField1;
	this.numberOfS1 = source.numberOfS1 + 1;
        end;
    }

    act AProrotype clone () {
	retutn new S1 (this);
    }
}


class S2 extends APrototype {
    String anotherData2 = "S2 anotherData2";
    int anotherNumber2 = 0;
    
    S2 (S2 source) {
	if source != null then
	   this.anotherData2 = source.anotherData2;
	   this.anotherNumber2 = source.anotherNumber2+10;
        end;
    }
    
   act APrototype clone() {
	return new S2 (this);
    }
}


    
